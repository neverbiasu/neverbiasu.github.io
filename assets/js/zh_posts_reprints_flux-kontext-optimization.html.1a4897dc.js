"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6482],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},54662:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>l});var e=a(20641);const t={},n=(0,a(66262).A)(t,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="【博客转载】我们如何优化-flux-1-kontext-dev" tabindex="-1"><a class="header-anchor" href="#【博客转载】我们如何优化-flux-1-kontext-dev"><span>【博客转载】我们如何优化 FLUX.1 Kontext [dev]</span></a></h1><figure><img src="https://replicate.com/_content/assets/top-graphic.CLh5lXp7_Z2h1V1F.webp" alt="FLUX.1 Kontext 优化图" tabindex="0" loading="lazy"><figcaption>FLUX.1 Kontext 优化图</figcaption></figure><p>除了让我们的 FLUX.1 Kontext [dev] 实现开源之外，我们还希望提供更多关于如何在不降低质量的前提下优化它的指导。</p><p>在这篇文章中，您将主要了解 TaylorSeer 优化，这是一种通过使用缓存的图像变化（导数）和从 Taylor 级数近似推导出的公式来近似中间图像预测的方法。</p><p>各位优化爱好者，请继续阅读。</p><hr><p>（我们从以下论文中获取了大部分实现信息：《From Reusing to Forecasting: Accelerating Diffusion Models with TaylorSeers》（从重用到预测：使用 TaylorSeer 加速扩散模型））</p><p>如果您前往我们 FLUX.1 Kontext [dev] 代码库中 <code>predict.py</code> 的预测函数，您会找到主要逻辑。（强烈建议通过代码库进行操作，并将此文章作为理解其结构的指南。）</p><p>让我们来分解一下。</p><h2 id="关于-taylorseer" tabindex="-1"><a class="header-anchor" href="#关于-taylorseer"><span>关于 TaylorSeer</span></a></h2><p>当使用 FLUX.1 Kontext 生成新图像时，您会在多个时间步长中应用扩散变换——连续大约 30 个步骤。在每一步中，一堆变换器层预测对您正在去噪的图像的更新。这个过程可能需要一段时间。</p><p>在任何给定的时间步长中，模型预测的变化与之前时间步长的预测具有冗余性。我们可以通过在某些时间步长缓存模型的输出，并在未来的时间步长重用缓存的输出来利用这些冗余性。这种&quot;朴素缓存&quot;——您只是重用最后的特征或潜在值——有时效果还可以，但可能导致模糊、细节丢失，或有时图像完全失真。</p><p>您可以尝试稍微聪明一点的方法：线性近似。您可以通过查看最后两步之间的差异（即一阶有限差分）并延长线条来估计下一步。这更好，但仍然不够理想。它无法捕获曲线、加速度或非线性变化——所有这些在扩散模型中都很常见。</p><p>TaylorSeer 为此提供了解决方案。它使用 <strong>Taylor 级数</strong>通过<strong>一系列缓存导数</strong>来近似模型在时间步长的输出，捕获非线性变化。</p><p>用数学术语来说，这是核心思想。为了预测某一层 <em>l</em> 在时间步长 <em>t+k</em> 的特征，我们使用截断的 Taylor 展开：</p><figure><img src="https://replicate.com/_content/assets/equation_1.D448o7_6_2extT4.webp" alt="FLUX.1 Kontext 优化图" tabindex="0" loading="lazy"><figcaption>FLUX.1 Kontext 优化图</figcaption></figure><p>注意，求和需要特征函数的 i 阶导数。由于我们无法计算实际导数，我们可以使用每个 i-1 阶和 i 阶导数之间的有限差分。查看论文了解确切的数学，但当您执行该替换并进行一些简化时，您会得到以下结果：</p><figure><img src="https://replicate.com/_content/assets/equation_2.Bd6ZJgzi_1c5lfT.webp" alt="FLUX.1 Kontext 优化方程 2" tabindex="0" loading="lazy"><figcaption>FLUX.1 Kontext 优化方程 2</figcaption></figure><p>这是我们对时间步长 <em>t+k</em> 特征的最终近似。</p><p>现在我们有了一种通过在特定时间步长使用上述估计来加速扩散过程的方法。</p><p>我们设置了一个 TaylorSeer 缓存来在需要时执行此近似：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">order </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n_derivatives </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">taylor_seer_state </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;dY_prev&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> order,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;dY_current&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> order,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;last_non_approximated_step&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;current_step&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>order = n_derivatives + 1</code>。例如，如果 <code>n_derivatives = 2</code>，那么 <code>order = 3</code>，我们缓存：</p><ul><li><code>dY_current[0]</code>：当前特征</li><li><code>dY_current[1]</code>：一阶导数</li><li><code>dY_current[2]</code>：二阶导数</li></ul><p><code>denoise()</code> 的前几步总是计算完整预测，用于初始化有限差分。后面的步骤可以近似。</p><hr><h2 id="逐步解析-taylorseer-在-flux-kontext-中的工作原理" tabindex="-1"><a class="header-anchor" href="#逐步解析-taylorseer-在-flux-kontext-中的工作原理"><span>逐步解析：TaylorSeer 在 Flux Kontext 中的工作原理</span></a></h2><p>一旦我们准备好输入，我们使用 <code>generate_compute_step_map()</code> 决定哪些步骤要计算，哪些要近似：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> generate_compute_step_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">acceleration_level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> num_inference_steps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> acceleration_level </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;none&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num_inference_steps</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        elif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> acceleration_level </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;go fast&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                # 计算前 4 步和后 4 步，中间所有步骤交替进行</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                k </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                compute_step_map </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [k[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(num_inference_steps)]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                compute_step_map[:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                compute_step_map[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> compute_step_map</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        elif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> acceleration_level </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;go really fast&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                # 计算前 3 步和后 3 步，中间所有步骤在完整计算一次和近似两次之间交替</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                k </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                compute_step_map </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [k[i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(num_inference_steps)]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                compute_step_map[:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                compute_step_map[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> compute_step_map</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">        ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>generate_compute_step_map()</code> 遵循一个简单规则：始终计算前几步和后几步，因为这是模型做出最大变化的地方。在中间步骤中，我们在&quot;快速&quot;模式下每隔一步计算一次，或在&quot;非常快速&quot;模式下每隔三步计算一次。像 First Block Cache 这样的自适应方法，检查第一个变换器块输出的变化程度，可能是确定要跳过哪些步骤的明智做法，但这种硬编码策略效果很好。</p><h2 id="两条路径-计算或近似" tabindex="-1"><a class="header-anchor" href="#两条路径-计算或近似"><span>两条路径：计算或近似</span></a></h2><p>在去噪循环中：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> compute_step_map[current_step]:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        pred </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 完整预测</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        taylor_seer_state[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dY_current&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> approximate_derivative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        pred </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> approximate_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 TaylorSeer 预测</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们分解每条路径。</p><hr><h3 id="路径-1-完整计算" tabindex="-1"><a class="header-anchor" href="#路径-1-完整计算"><span>路径 1：完整计算</span></a></h3><p>我们正常运行模型并更新我们存储的有限差分（导数）：</p><p><code>dY_current[i+1] = (dY_current[i] - dY_prev[i]) / finite_difference_window</code></p><p>这是从低阶有限差分递归计算高阶有限差分的视图。第 <em>m+1</em> 阶导数来自第 <em>m</em> 阶导数值在经过时间内的差异。</p><p>这些差异近似特征值如何随时间演变。</p><hr><h3 id="路径-2-使用-taylor-级数近似" tabindex="-1"><a class="header-anchor" href="#路径-2-使用-taylor-级数近似"><span>路径 2：使用 Taylor 级数近似</span></a></h3><p>如果我们决定跳过一步（基于 <code>compute_step_map</code>），我们使用缓存的差分来估计下一个特征更新（来自方程 2 的近似）：</p><p><code>output += (1 / math.factorial(i)) * dY_current[i] * (elapsed_steps ** i)</code></p><p>计算此近似所需的时间与运行完整模型进行单次去噪步骤所需的时间相比几乎是瞬时的。</p><hr><h3 id="更新潜在变量" tabindex="-1"><a class="header-anchor" href="#更新潜在变量"><span>更新潜在变量</span></a></h3><p>在每一步中，无论我们是计算还是近似，我们都将预测的增量应用到图像潜在变量：</p><p><code>img = img + (t_prev - t_curr) * pred</code></p><p>这使图像变换在时间步长中持续演进。</p><hr><p>去噪循环结束后，我们返回最终图像！</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>我们不再在每个时间步长评估模型，而是：</p><ol><li><strong>缓存</strong>过去的预测及其有限差分。</li><li><strong>使用 Taylor 级数</strong>近似模型在跳过步骤的输出。</li><li><strong>减少模型调用</strong>从 30 次到大约 10-15 次，取决于速度设置。</li><li><strong>保持质量</strong>，特别是在生成的开始和结束阶段，那里准确性最重要。</li></ol><p>TaylorSeer 为我们提供了一种有原则、灵活的方式，使用特征动力学来预测图像生成中的中间步骤。它比运行每一步都更快，比线性外推更智能。</p><p>您可以在我们的 FLUX.1 Kontext 代码库中的 <code>denoise()</code> 和 <code>taylor_utils.py</code> 中找到所有这些内容。</p><p>尽情探索代码库，告诉我们您的发现！</p><p>试一试： FLUX.1 Kontext [dev]</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><ol><li><a href="https://replicate.com/black-forest-labs/flux-kontext-dev" target="_blank" rel="noopener noreferrer">FLUX.1 Kontext [dev]</a></li><li><a href="https://arxiv.org/abs/2503.06923" target="_blank" rel="noopener noreferrer">论文 &quot;From Reusing to Forecasting: Accelerating Diffusion Models with TaylorSeers&quot;</a></li><li><a href="https://github.com/replicate/cog-flux-kontext" target="_blank" rel="noopener noreferrer">FLUX.1 Kontext [dev] 代码库</a></li><li><a href="https://github.com/replicate/cog-flux-kontext/blob/main/predict.py" target="_blank" rel="noopener noreferrer"><code>denoise()</code></a></li><li><a href="https://github.com/replicate/cog-flux-kontext/blob/main/flux/taylor_seer_utils.py" target="_blank" rel="noopener noreferrer"><code>taylor_utils.py</code></a></li><li><a href="https://replicate.com/black-forest-labs/flux-kontext-dev" target="_blank" rel="noopener noreferrer">试用 FLUX.1 Kontext [dev]</a></li></ol>',61)]))}]]),l=JSON.parse('{"path":"/zh/posts/reprints/flux-kontext-optimization.html","title":"我们如何优化 FLUX.1 Kontext [dev]","lang":"zh-CN","frontmatter":{"title":"我们如何优化 FLUX.1 Kontext [dev]","date":"2025-07-15T00:00:00.000Z","authors":[{"name":"shridharathi","link":"https://replicate.com/shridharathi"},{"name":"alexarmbr","link":"https://replicate.com/alexarmbr"}],"tags":["FLUX.1","优化","TaylorSeer","Replicate"],"description":"【博客转载】我们如何优化 FLUX.1 Kontext [dev] FLUX.1 Kontext 优化图FLUX.1 Kontext 优化图 除了让我们的 FLUX.1 Kontext [dev] 实现开源之外，我们还希望提供更多关于如何在不降低质量的前提下优化它的指导。 在这篇文章中，您将主要了解 TaylorSeer 优化，这是一种通过使用缓存的图...","gitInclude":[],"head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://neverbiasu.github.io/posts/reprints/flux-kontext-optimization.html"}],["meta",{"property":"og:url","content":"https://neverbiasu.github.io/zh/posts/reprints/flux-kontext-optimization.html"}],["meta",{"property":"og:site_name","content":"Nlog"}],["meta",{"property":"og:title","content":"我们如何优化 FLUX.1 Kontext [dev]"}],["meta",{"property":"og:description","content":"【博客转载】我们如何优化 FLUX.1 Kontext [dev] FLUX.1 Kontext 优化图FLUX.1 Kontext 优化图 除了让我们的 FLUX.1 Kontext [dev] 实现开源之外，我们还希望提供更多关于如何在不降低质量的前提下优化它的指导。 在这篇文章中，您将主要了解 TaylorSeer 优化，这是一种通过使用缓存的图..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://replicate.com/_content/assets/top-graphic.CLh5lXp7_Z2h1V1F.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"article:tag","content":"FLUX.1"}],["meta",{"property":"article:tag","content":"优化"}],["meta",{"property":"article:tag","content":"TaylorSeer"}],["meta",{"property":"article:tag","content":"Replicate"}],["meta",{"property":"article:published_time","content":"2025-07-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"我们如何优化 FLUX.1 Kontext [dev]\\",\\"image\\":[\\"https://replicate.com/_content/assets/top-graphic.CLh5lXp7_Z2h1V1F.webp\\",\\"https://replicate.com/_content/assets/equation_1.D448o7_6_2extT4.webp\\",\\"https://replicate.com/_content/assets/equation_2.Bd6ZJgzi_1c5lfT.webp\\"],\\"datePublished\\":\\"2025-07-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"neverbiasu\\",\\"url\\":\\"https://neverbiasu.github.io\\"}]}"]]},"headers":[{"level":2,"title":"关于 TaylorSeer","slug":"关于-taylorseer","link":"#关于-taylorseer","children":[]},{"level":2,"title":"逐步解析：TaylorSeer 在 Flux Kontext 中的工作原理","slug":"逐步解析-taylorseer-在-flux-kontext-中的工作原理","link":"#逐步解析-taylorseer-在-flux-kontext-中的工作原理","children":[]},{"level":2,"title":"两条路径：计算或近似","slug":"两条路径-计算或近似","link":"#两条路径-计算或近似","children":[{"level":3,"title":"路径 1：完整计算","slug":"路径-1-完整计算","link":"#路径-1-完整计算","children":[]},{"level":3,"title":"路径 2：使用 Taylor 级数近似","slug":"路径-2-使用-taylor-级数近似","link":"#路径-2-使用-taylor-级数近似","children":[]},{"level":3,"title":"更新潜在变量","slug":"更新潜在变量","link":"#更新潜在变量","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"readingTime":{"minutes":5.93,"words":1780},"filePathRelative":"zh/posts/reprints/flux-kontext-optimization.md","localizedDate":"2025年7月15日","excerpt":"\\n<figure><img src=\\"https://replicate.com/_content/assets/top-graphic.CLh5lXp7_Z2h1V1F.webp\\" alt=\\"FLUX.1 Kontext 优化图\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>FLUX.1 Kontext 优化图</figcaption></figure>\\n<p>除了让我们的 FLUX.1 Kontext [dev] 实现开源之外，我们还希望提供更多关于如何在不降低质量的前提下优化它的指导。</p>\\n<p>在这篇文章中，您将主要了解 TaylorSeer 优化，这是一种通过使用缓存的图像变化（导数）和从 Taylor 级数近似推导出的公式来近似中间图像预测的方法。</p>","autoDesc":true}')}}]);