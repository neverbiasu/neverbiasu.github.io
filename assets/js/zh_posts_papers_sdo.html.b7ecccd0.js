"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9061],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,t]of s)a[i]=t;return a}},98152:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>e});var t=a(20641);const n={},l=(0,a(66262).A)(n,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="【论文精读】sdo-用梯度捷径加速扩散采样中的反向传播" tabindex="-1"><a class="header-anchor" href="#【论文精读】sdo-用梯度捷径加速扩散采样中的反向传播"><span>【论文精读】SDO: 用梯度捷径加速扩散采样中的反向传播</span></a></h1><figure><img src="https://arxiv.org/html/2505.07477v1/x1.png" alt="SDO通过扩散采样中的反向传播实现多样化应用" tabindex="0" loading="lazy"><figcaption>SDO通过扩散采样中的反向传播实现多样化应用</figcaption></figure><h2 id="摘要" tabindex="-1"><a class="header-anchor" href="#摘要"><span>摘要</span></a></h2><p>扩散模型 (DMs) 在下游任务中反向传播计算成本高昂。本文提出捷径扩散优化 (SDO)，通过仅保留一步计算图优化目标函数，显著降低约90%计算成本，同时保持或超越完整反向传播性能。SDO适用于潜变量优化、模型微调等任务，兼具通用性、高性能和轻量级特点。</p><hr><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ol><li><a href="#%E7%A0%94%E7%A9%B6%E8%83%8C%E6%99%AF%E4%B8%8E%E5%8A%A8%E6%9C%BA">研究背景与动机</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%B8%8E%E6%8A%80%E6%9C%AF%E5%88%9B%E6%96%B0">方法与技术创新</a></li><li><a href="#%E5%AE%9E%E9%AA%8C%E4%B8%8E%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90">实验与结果分析</a></li><li><a href="#%E6%A8%A1%E5%9E%8B%E5%90%AF%E5%8F%91%E4%B8%8E%E6%96%B9%E6%B3%95%E5%BB%B6%E4%BC%B8">模型启发与方法延伸</a></li><li><a href="#%E7%BB%93%E8%AE%BA%E4%B8%8E%E6%9C%AA%E6%9D%A5%E5%B7%A5%E4%BD%9C">结论与未来工作</a></li></ol><hr><h2 id="研究背景与动机" tabindex="-1"><a class="header-anchor" href="#研究背景与动机"><span>研究背景与动机</span></a></h2><p>扩散模型 (DMs) 在图像生成、视频生成等领域取得了巨大成功。然而，许多下游任务（如提升图像质量、实现个性化风格）常常需要对预训练模型进行定制。这通常被构建为一个优化问题，通过反向传播来解决。但由于DMs固有的迭代特性，完整的反向传播会导致巨大的计算量和内存消耗。</p><figure><img src="https://arxiv.org/html/2505.07477v1/x2.png" alt="扩散模型中的梯度流。普通反向传播需要通过整个链计算梯度（红色箭头），而SDO通过捷径（紫色箭头）直接优化参数。" tabindex="0" loading="lazy"><figcaption>扩散模型中的梯度流。普通反向传播需要通过整个链计算梯度（红色箭头），而SDO通过捷径（紫色箭头）直接优化参数。</figcaption></figure><p>本文对这种完全反向传播的必要性提出了质疑。受到近期并行去噪研究（特别是 <strong>Picard迭代</strong>）的启发，作者提出<strong>捷径扩散优化 (SDO)</strong>。其核心思想在于，仅保留单步计算图进行优化就足以有效地传递梯度，从而大幅降低计算负担。实验表明，SDO在多种任务上表现优异，计算成本降低约90%，效果媲美甚至超越完全反向传播。</p><hr><h2 id="方法与技术创新" tabindex="-1"><a class="header-anchor" href="#方法与技术创新"><span>方法与技术创新</span></a></h2><h3 id="普通反向传播的局限性" tabindex="-1"><a class="header-anchor" href="#普通反向传播的局限性"><span>普通反向传播的局限性</span></a></h3><p>在扩散模型中，通过整个采样过程（N步）进行<strong>普通反向传播 (Plain Backpropagation, PBP)</strong> 来优化目标函数，会导致计算图过深，带来巨大的<strong>内存消耗 (memory consumption)</strong> 和时间开销，且可能存在<strong>梯度爆炸/消失 (gradient explosion/vanishing)</strong> 问题。</p><figure><img src="https://arxiv.org/html/2505.07477v1/x3.png" alt="(a) 普通反向传播 和 (b) SDO 的计算图比较。SDO通过仅保留当前步骤的计算图显著减少了计算开销。" tabindex="0" loading="lazy"><figcaption>(a) 普通反向传播 和 (b) SDO 的计算图比较。SDO通过仅保留当前步骤的计算图显著减少了计算开销。</figcaption></figure><h3 id="捷径扩散优化-sdo" tabindex="-1"><a class="header-anchor" href="#捷径扩散优化-sdo"><span>捷径扩散优化 (SDO)</span></a></h3><h4 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想"><span>核心思想</span></a></h4><p>SDO 的核心思想是通过<strong>梯度捷径 (gradient shortcut)</strong>，在采样链的优化过程中，仅保留关键一步的梯度信息，而对其余步骤的梯度进行阻断。这种方法显著降低了反向传播的计算复杂度和内存需求，同时保持优化效果。</p><ul><li><strong>传统方法</strong>：完整反向传播需要通过整个采样链计算梯度，导致内存占用和计算量随采样步数线性增长。</li><li><strong>SDO 方法</strong>：仅在关键一步（如最后一步）保留梯度，其余步骤通过 <code>torch.no_grad()</code> 或类似机制阻断梯度流。</li></ul><h4 id="实现细节" tabindex="-1"><a class="header-anchor" href="#实现细节"><span>实现细节</span></a></h4><ol><li><p><strong>采样阶段</strong>：</p><ul><li>使用标准扩散采样算法（如 DDIM 或 DPM-Solver）生成采样链。</li><li>所有采样步骤均正常执行，确保生成质量与普通采样一致。</li></ul></li><li><p><strong>梯度计算阶段</strong>：</p><ul><li>在反向传播时，仅保留关键一步的计算图。</li><li>其余步骤的梯度通过 <code>detach()</code> 或 <code>torch.no_grad()</code> 阻断，避免冗余计算。</li></ul></li><li><p><strong>优化阶段</strong>：</p><ul><li>使用关键一步的梯度更新优化目标（如潜变量或模型参数）。</li><li>通过减少梯度计算的深度，显著降低内存占用和计算时间。</li></ul></li></ol><h4 id="伪代码示例" tabindex="-1"><a class="header-anchor" href="#伪代码示例"><span>伪代码示例</span></a></h4><p>以下是 SDO 的简化实现伪代码：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">params </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;params&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: model.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;lr&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: lr}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">optimizer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.optim.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Adam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([params])</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(epochs):</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   optimizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">zero_grad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   x_t </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x_N</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   backprop_step </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> random.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">randint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(scheduler.timesteps) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Ensure valid index</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i, t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> enumerate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(scheduler.timesteps):</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      is_grad </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> backprop_step)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">set_grad_enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(is_grad):</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         noise_pred </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x_t, t)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         x_t </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scheduler.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(noise_pred, t, x_t) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># .sample for some schedulers</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is_grad:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">clamp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x_t, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            loss </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> J</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(output)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            loss.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">backward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   optimizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="理论支持" tabindex="-1"><a class="header-anchor" href="#理论支持"><span>理论支持</span></a></h4><p>SDO 的有效性基于 Picard 迭代的理论支持。Picard 迭代是一种用于求解固定点问题的高效方法，能够在并行采样的基础上提供梯度近似。理论分析表明，SDO 的梯度近似误差满足以下条件：</p><p>$$|\\nabla_\\theta L_{SDO} - \\nabla_\\theta L_{full}| \\leq C$$</p><p>其中 $C$ 是一个有界常数，表明 SDO 的梯度近似在合理假设下是可靠的。</p><h4 id="优势总结" tabindex="-1"><a class="header-anchor" href="#优势总结"><span>优势总结</span></a></h4><ul><li><strong>计算效率</strong>：将反向传播的复杂度从 $O(N)$ 降低到 $O(1)$。</li><li><strong>内存友好</strong>：显著减少内存占用，支持更大规模的模型和任务。</li><li><strong>兼容性强</strong>：适用于各种扩散采样器（如 DDIM、DPM-Solver）和优化目标（如潜变量、模型参数）。</li><li><strong>稳定性高</strong>：缓解梯度爆炸和梯度消失问题，优化过程更稳定。</li></ul><hr><h2 id="实验与结果分析" tabindex="-1"><a class="header-anchor" href="#实验与结果分析"><span>实验与结果分析</span></a></h2><h3 id="质量评估" tabindex="-1"><a class="header-anchor" href="#质量评估"><span>质量评估</span></a></h3><p>实验对比了 SDO 与现有方法在多个指标上的表现，包括 LPIPS（越低越好）、CLIP（越高越好）和 ID loss（越低越好）。结果表明，SDO 在所有指标上均优于其他方法，尤其在 CLIP 指标上表现突出。</p><table><thead><tr><th>方法</th><th>LPIPS ↓</th><th>CLIP ↑</th><th>ID loss ↓</th></tr></thead><tbody><tr><td>DiffusionCLIP [77]</td><td>0.175</td><td>29.93</td><td>0.901</td></tr><tr><td>FlowGrad [38]</td><td>0.142</td><td>31.30</td><td>0.797</td></tr><tr><td>AdjointDPM [26]</td><td>0.188</td><td>28.14</td><td>0.908</td></tr><tr><td>DOODL [27]</td><td>0.183</td><td>28.76</td><td>0.914</td></tr><tr><td><strong>SDO (Ours)</strong></td><td><strong>0.134</strong></td><td><strong>32.18</strong></td><td><strong>0.790</strong></td></tr></tbody></table><h3 id="应用案例" tabindex="-1"><a class="header-anchor" href="#应用案例"><span>应用案例</span></a></h3><h4 id="风格迁移" tabindex="-1"><a class="header-anchor" href="#风格迁移"><span>风格迁移</span></a></h4><p>SDO 在风格迁移任务中表现优异，能够将参考图像的艺术风格成功迁移到生成内容中，同时保持内容一致性。</p><ul><li><p><strong>风格引导生成的比较</strong><br><img src="https://arxiv.org/html/2505.07477v1/x6.png" alt="风格引导生成的比较" loading="lazy"></p></li><li><p><strong>使用 PixArt 进行风格引导生成</strong><br><img src="https://arxiv.org/html/2505.07477v1/x14.png" alt="使用PixArt进行风格引导生成" loading="lazy"></p></li><li><p><strong>使用潜在一致性模型（LCM）进行风格引导生成</strong><br><img src="https://arxiv.org/html/2505.07477v1/x15.png" alt="使用潜在一致性模型（LCM）进行风格引导生成" loading="lazy"></p></li></ul><hr><h2 id="模型启发与方法延伸" tabindex="-1"><a class="header-anchor" href="#模型启发与方法延伸"><span>模型启发与方法延伸</span></a></h2><h3 id="优势与特点" tabindex="-1"><a class="header-anchor" href="#优势与特点"><span>优势与特点</span></a></h3><ul><li><strong>高效优化</strong>：通过梯度捷径显著降低反向传播的计算复杂度，从$O(N)$降到$O(1)$，支持更大规模的模型和任务。</li><li><strong>灵活适配</strong>：兼容多种扩散采样器（如 DDIM、DPM-Solver）和优化目标（如潜变量、模型参数）。</li><li><strong>稳定性提升</strong>：缓解梯度爆炸和梯度消失问题，优化过程更加稳定。</li><li><strong>资源节约</strong>：内存占用更低，支持更高分辨率和更复杂的生成任务。</li></ul><h3 id="局限性与挑战" tabindex="-1"><a class="header-anchor" href="#局限性与挑战"><span>局限性与挑战</span></a></h3><ul><li><strong>固定生成顺序</strong>：当前实现依赖预设的块生成顺序，可能限制灵活性。</li><li><strong>块间一致性</strong>：在某些复杂场景下，可能出现块边界不连贯的问题。</li><li><strong>复杂提示处理</strong>：对于极其复杂的文本提示，可能需要调整块大小以优化生成效果。</li><li><strong>理论扩展</strong>：虽然已有理论支持，但在更广泛条件下的近似误差分析仍需进一步研究。</li></ul><hr><h2 id="结论与未来工作" tabindex="-1"><a class="header-anchor" href="#结论与未来工作"><span>结论与未来工作</span></a></h2><p>SDO通过引入<strong>梯度捷径</strong>，显著加速了扩散采样中的反向传播，将计算成本降低了约90%，同时保持或提高了性能。它为下游应用提供了一个更高效、更稳定的优化方法，使得扩散模型在实际应用中更易用、更高效。</p><p>未来研究方向可能包括：</p><ul><li><strong>动态生成顺序</strong>：基于内容重要性确定最优生成序列</li><li><strong>与视频生成结合</strong>：扩展到实时视频生成的领域</li></ul><hr><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h3><ol><li><a href="https://arxiv.org/abs/2505.07477" target="_blank" rel="noopener noreferrer">论文原文</a></li><li><a href="https://github.com/deng-ai-lab/SDO" target="_blank" rel="noopener noreferrer">代码仓库</a></li><li><a href="https://www.alphaxiv.org/overview/2505.07477" target="_blank" rel="noopener noreferrer">alphaxiv 论文解读</a></li></ol>',55)]))}]]),e=JSON.parse('{"path":"/zh/posts/papers/sdo.html","title":"【论文精读】SDO: 用梯度捷径加速扩散采样中的反向传播","lang":"zh-CN","frontmatter":{"title":"【论文精读】SDO: 用梯度捷径加速扩散采样中的反向传播","icon":"material-symbols:image","cover":"https://arxiv.org/html/2505.07477v1/x1.png","date":"2024-05-08T00:00:00.000Z","category":["图像生成","论文精读"],"tag":["SDO","扩散模型","反向传播","计算优化","可控生成"],"author":"Hongkun Dou, Zeyu Li, Xingyu Jiang, Hongjue Li, Lijun Yang, Wen Yao, and Yue Deng","description":"【论文精读】SDO: 用梯度捷径加速扩散采样中的反向传播 SDO通过扩散采样中的反向传播实现多样化应用SDO通过扩散采样中的反向传播实现多样化应用 摘要 扩散模型 (DMs) 在下游任务中反向传播计算成本高昂。本文提出捷径扩散优化 (SDO)，通过仅保留一步计算图优化目标函数，显著降低约90%计算成本，同时保持或超越完整反向传播性能。SDO适用于潜变量...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://neverbiasu.github.io/zh/posts/papers/sdo.html"}],["meta",{"property":"og:site_name","content":"Nlog"}],["meta",{"property":"og:title","content":"【论文精读】SDO: 用梯度捷径加速扩散采样中的反向传播"}],["meta",{"property":"og:description","content":"【论文精读】SDO: 用梯度捷径加速扩散采样中的反向传播 SDO通过扩散采样中的反向传播实现多样化应用SDO通过扩散采样中的反向传播实现多样化应用 摘要 扩散模型 (DMs) 在下游任务中反向传播计算成本高昂。本文提出捷径扩散优化 (SDO)，通过仅保留一步计算图优化目标函数，显著降低约90%计算成本，同时保持或超越完整反向传播性能。SDO适用于潜变量..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://arxiv.org/html/2505.07477v1/x1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://arxiv.org/html/2505.07477v1/x1.png"}],["meta",{"name":"twitter:image:alt","content":"【论文精读】SDO: 用梯度捷径加速扩散采样中的反向传播"}],["meta",{"property":"article:author","content":"Hongkun Dou, Zeyu Li, Xingyu Jiang, Hongjue Li, Lijun Yang, Wen Yao, and Yue Deng"}],["meta",{"property":"article:tag","content":"SDO"}],["meta",{"property":"article:tag","content":"扩散模型"}],["meta",{"property":"article:tag","content":"反向传播"}],["meta",{"property":"article:tag","content":"计算优化"}],["meta",{"property":"article:tag","content":"可控生成"}],["meta",{"property":"article:published_time","content":"2024-05-08T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【论文精读】SDO: 用梯度捷径加速扩散采样中的反向传播\\",\\"image\\":[\\"https://arxiv.org/html/2505.07477v1/x1.png\\",\\"https://arxiv.org/html/2505.07477v1/x2.png\\",\\"https://arxiv.org/html/2505.07477v1/x3.png\\",\\"https://arxiv.org/html/2505.07477v1/x6.png\\",\\"https://arxiv.org/html/2505.07477v1/x14.png\\",\\"https://arxiv.org/html/2505.07477v1/x15.png\\"],\\"datePublished\\":\\"2024-05-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Hongkun Dou, Zeyu Li, Xingyu Jiang, Hongjue Li, Lijun Yang, Wen Yao, and Yue Deng\\"}]}"]]},"headers":[{"level":2,"title":"摘要","slug":"摘要","link":"#摘要","children":[]},{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"研究背景与动机","slug":"研究背景与动机","link":"#研究背景与动机","children":[]},{"level":2,"title":"方法与技术创新","slug":"方法与技术创新","link":"#方法与技术创新","children":[{"level":3,"title":"普通反向传播的局限性","slug":"普通反向传播的局限性","link":"#普通反向传播的局限性","children":[]},{"level":3,"title":"捷径扩散优化 (SDO)","slug":"捷径扩散优化-sdo","link":"#捷径扩散优化-sdo","children":[]}]},{"level":2,"title":"实验与结果分析","slug":"实验与结果分析","link":"#实验与结果分析","children":[{"level":3,"title":"质量评估","slug":"质量评估","link":"#质量评估","children":[]},{"level":3,"title":"应用案例","slug":"应用案例","link":"#应用案例","children":[]}]},{"level":2,"title":"模型启发与方法延伸","slug":"模型启发与方法延伸","link":"#模型启发与方法延伸","children":[{"level":3,"title":"优势与特点","slug":"优势与特点","link":"#优势与特点","children":[]},{"level":3,"title":"局限性与挑战","slug":"局限性与挑战","link":"#局限性与挑战","children":[]}]},{"level":2,"title":"结论与未来工作","slug":"结论与未来工作","link":"#结论与未来工作","children":[{"level":3,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}]}],"readingTime":{"minutes":6.77,"words":2030},"filePathRelative":"zh/posts/papers/sdo.md","localizedDate":"2024年5月8日","excerpt":"\\n<figure><img src=\\"https://arxiv.org/html/2505.07477v1/x1.png\\" alt=\\"SDO通过扩散采样中的反向传播实现多样化应用\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>SDO通过扩散采样中的反向传播实现多样化应用</figcaption></figure>\\n<h2>摘要</h2>\\n<p>扩散模型 (DMs) 在下游任务中反向传播计算成本高昂。本文提出捷径扩散优化 (SDO)，通过仅保留一步计算图优化目标函数，显著降低约90%计算成本，同时保持或超越完整反向传播性能。SDO适用于潜变量优化、模型微调等任务，兼具通用性、高性能和轻量级特点。</p>","autoDesc":true}')}}]);